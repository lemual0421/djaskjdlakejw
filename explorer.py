import os
from datetime import datetime
from art import text2art
from simple_term_menu import TerminalMenu
import sys

class FileExplorer:
    def __init__(self):
        self.current_dir = os.path.expanduser("~")
        self.terminal_width = os.get_terminal_size().columns
        self.header = text2art("FileExplorer", font="tiny").split("\n")
        self.border = "‚ïê" * self.terminal_width
        self.main_loop()

    def clear_screen(self):
        os.system("clear || cls")

    def print_header(self, subtitle=""):
        print("\033[1;36m")  # Cyan color
        for line in self.header:
            print(line.center(self.terminal_width))
        print(f"\033[0m{subtitle.center(self.terminal_width)}")
        print(self.border)

    def format_size(self, size):
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size < 1024:
                return f"{size:.2f} {unit}"
            size /= 1024
        return f"{size:.2f} –¢–ë"

    def show_file_info(self, file_path):
        stat_info = os.stat(file_path)
        info = {
            "name": os.path.basename(file_path),
            "path": file_path,
            "size": self.format_size(stat_info.st_size),
            "modified": datetime.fromtimestamp(stat_info.st_mtime),
            "type": "–ü–∞–ø–∫–∞" if os.path.isdir(file_path) else "–§–∞–π–ª"
        }
        
        self.clear_screen()
        self.print_header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
        print(f"""
–ò–º—è: {info['name']}
–ü—É—Ç—å: {info['path']}
–†–∞–∑–º–µ—Ä: {info['size']}
–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {info['modified']}
–¢–∏–ø: {info['type']}
        """)
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...")

    def create_backup(self, file_path):
        backup_path = file_path + ".bak"
        try:
            with open(file_path, "rb") as src, open(backup_path, "wb") as dst:
                dst.write(src.read())
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏: {str(e)}")
        time.sleep(1)

    def file_context_menu(self, file_path):
        while True:
            self.clear_screen()
            self.print_header(f"–§–∞–π–ª: {os.path.basename(file_path)}")
            
            menu = TerminalMenu(
                ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", "–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é", "–ù–∞–∑–∞–¥"],
                clear_screen=False,
                status_bar="[‚Üë‚Üì] –ù–∞–≤–∏–≥–∞—Ü–∏—è [Enter] –í—ã–±–æ—Ä"
            )
            
            choice = menu.show()
            if choice == 0:
                self.show_file_info(file_path)
            elif choice == 1:
                self.create_backup(file_path)
            else:
                return

    def main_loop(self):
        while True:
            entries = []
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if self.current_dir != os.path.abspath(os.sep):
                entries.append({
                    "name": "..",
                    "type": "dir",
                    "path": os.path.dirname(self.current_dir)
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
            for entry in sorted(os.listdir(self.current_dir)):
                full_path = os.path.join(self.current_dir, entry)
                entries.append({
                    "name": entry,
                    "type": "dir" if os.path.isdir(full_path) else "file",
                    "path": full_path
                })

            self.clear_screen()
            self.print_header(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.current_dir}")
            
            menu_items = [
                f"{'üìÅ' if e['type'] == 'dir' else 'üìÑ'} {e['name']}"
                for e in entries
            ]
            
            menu = TerminalMenu(
                menu_items,
                clear_screen=False,
                cycle_cursor=True,
                status_bar="[Enter] –í—ã–±—Ä–∞—Ç—å [Q] –í—ã—Ö–æ–¥",
                menu_cursor_style=("fg_cyan", "bold")
            )
            
            selected_index = menu.show()
            if selected_index is None:
                sys.exit("\033[?25h")  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä
            
            selected = entries[selected_index]
            if selected["type"] == "dir":
                self.current_dir = selected["path"]
            else:
                self.file_context_menu(selected["path"])

if __name__ == "__main__":
    print("\033[?25l")  # –°–∫—Ä—ã—Ç—å –∫—É—Ä—Å–æ—Ä
    FileExplorer()
    print("\033[?25h")  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä